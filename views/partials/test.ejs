<!------TO BE DELETED LATER------------>
<style>

#board {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
  background-color: rgb(245,247,250);
}

.card1 {
  width: 320px;
  height: 320px;
  position: absolute;
  top: 50%;
  left: 50%;
  border-radius: 1%;
  box-shadow: 0px 4px 4px 0px rgba(0,0,0,0.1);
  background-color: white;
  transform: translateX(-50%) translateY(-50%);
}

</style>

 <div class="row" style="height: 400px; text-align: center;">

    <div id="board">
        
        <div class="card1"></div>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script>
        

        class Carousel {

            constructor(element) {

                this.board = element

                // add first two card1s programmatically
                this.push()
                this.push()

                // handle gestures
                this.handle()

            }

            handle() {

                // list all card1s
                this.card1s = this.board.querySelectorAll('.card1')

                // get top card1
                this.topcard1 = this.card1s[this.card1s.length - 1]

                // get next card1
                this.nextcard1 = this.card1s[this.card1s.length - 2]

                // if at least one card1 is present
                if (this.card1s.length > 0) {

                    // set default top card1 position and scale
                    this.topcard1.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'

                    // destroy previous Hammer instance, if present
                    if (this.hammer) this.hammer.destroy()

                    // listen for tap and pan gestures on top card1
                    this.hammer = new Hammer(this.topcard1)
                    this.hammer.add(new Hammer.Tap())
                    this.hammer.add(new Hammer.Pan({
                        position: Hammer.position_ALL,
                        threshold: 0
                    }))

                    // pass events data to custom callbacks
                    this.hammer.on('tap', (e) => {
                        this.onTap(e)
                    })
                    this.hammer.on('pan', (e) => {
                        this.onPan(e)
                    })

                }

            }

            onTap(e) {

                // get finger position on top card1
                let propX = (e.center.x - e.target.getBoundingClientRect().left) / e.target.clientWidth

                // get rotation degrees around Y axis (+/- 15) based on finger position
                let rotateY = 15 * (propX < 0.05 ? -1 : 1)

                // enable transform transition
                this.topcard1.style.transition = 'transform 100ms ease-out'

                // apply rotation around Y axis
                this.topcard1.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(' + rotateY + 'deg) scale(1)'

                // wait for transition end
                setTimeout(() => {
                    // reset transform properties
                    this.topcard1.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
                }, 100)

            }

            onPan(e) {

                if (!this.isPanning) {

                    this.isPanning = true

                    // remove transition properties
                    this.topcard1.style.transition = null
                    if (this.nextcard1) this.nextcard1.style.transition = null

                    // get top card1 coordinates in pixels
                    let style = window.getComputedStyle(this.topcard1)
                    let mx = style.transform.match(/^matrix\((.+)\)$/)
                    this.startPosX = mx ? parseFloat(mx[1].split(', ')[4]) : 0
                    this.startPosY = mx ? parseFloat(mx[1].split(', ')[5]) : 0

                    // get top card1 bounds
                    let bounds = this.topcard1.getBoundingClientRect()

                    // get finger position on top card1, top (1) or bottom (-1)
                    this.isDraggingFrom =
                        (e.center.y - bounds.top) > this.topcard1.clientHeight / 2 ? -1 : 1

                }

                // get new coordinates
                let posX = e.deltaX + this.startPosX
                let posY = e.deltaY + this.startPosY

                // get ratio between swiped pixels and the axes
                let propX = e.deltaX / this.board.clientWidth
                let propY = e.deltaY / this.board.clientHeight

                // get swipe direction, left (-1) or right (1)
                let dirX = e.deltaX < 0 ? -1 : 1

                // get degrees of rotation, between 0 and +/- 45
                let deg = this.isDraggingFrom * dirX * Math.abs(propX) * 45

                // get scale ratio, between .95 and 1
                let scale = (95 + (5 * Math.abs(propX))) / 100

                // move and rotate top card1
                this.topcard1.style.transform =
                    'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg) rotateY(0deg) scale(1)'

                // scale up next card1
                if (this.nextcard1) this.nextcard1.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(' + scale + ')'

                if (e.isFinal) {

                    this.isPanning = false

                    let successful = false

                    // set back transition properties
                    this.topcard1.style.transition = 'transform 200ms ease-out'
                    if (this.nextcard1) this.nextcard1.style.transition = 'transform 100ms linear'

                    // check threshold and movement direction
                    if (propX > 0.25 && e.direction == Hammer.DIRECTION_RIGHT) {

                        successful = true
                        // get right border position
                        posX = this.board.clientWidth

                    } else if (propX < -0.25 && e.direction == Hammer.DIRECTION_LEFT) {

                        successful = true
                        // get left border position
                        posX = -(this.board.clientWidth + this.topcard1.clientWidth)

                    } else if (propY < -0.25 && e.direction == Hammer.DIRECTION_UP) {

                        successful = true
                        // get top border position
                        posY = -(this.board.clientHeight + this.topcard1.clientHeight)

                    }

                    if (successful) {

                        // throw card1 in the chosen direction
                        this.topcard1.style.transform =
                            'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg)'

                        // wait transition end
                        setTimeout(() => {
                            // remove swiped card1
                            this.board.removeChild(this.topcard1)
                            // add new card1
                            this.push()
                            // handle gestures on new top card1
                            this.handle()
                        }, 200)

                    } else {

                        // reset card1s position and size
                        this.topcard1.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
                        if (this.nextcard1) this.nextcard1.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(0.95)'

                    }

                }

            }

            push() {

                let card1 = document.createElement('div')

                card1.classList.add('card1')

                card1.style.backgroundImage =
                    "url('https://picsum.photos/320/320/?random=" + Math.round(Math.random() * 1000000) + "')"

                this.board.insertBefore(card1, this.board.firstChild)

            }

        }

        let board = document.querySelector('#board')

        let carousel = new Carousel(board)
    </script>
    
    </div>




</div>